// Файл HeapInt.h
#pragma once // 1
#include <cassert>

class HeapInt
{
private:// чтобы нельзя было переписать данные
    int* heapValue; // 2

public:
    // 3
    inline HeapInt(int val) 
        // 4
        : heapValue(new int{ val })
    {
    }

    inline ~HeapInt()
    {
        // Заметка: delete проверяет на nullptr сам.
        delete heapValue; // 5
    }

    inline int& asRef()
    {
        assert(heapValue != nullptr); // 6
        return *heapValue;
    }

    HeapInt(const HeapInt& hello); // 7
    HeapInt(HeapInt&& hello);
    void operator=(const HeapInt& hello);
    void operator=(HeapInt&& hello);
};

// Файл main.cpp
#include "HeapInt.h"

void constructors()
{
    HeapInt a{5}; // 8
    HeapInt b{a}; // 9
    HeapInt c{std::move(a)}; // 10
    HeapInt d = b; // 11
    HeapInt e = std::move(b); // 12
    d = std::move(c); // 13
    d = e; // 14
}

// Файл HeapInt.cpp
#include "HeapInt.h"

// ... 15
1)Почему поле heapValue (2) приватное? 
Поле heapValue сделано приватным, чтобы исключить возможность непосредственного доступа и изменения heapValue извне.
2)Что означает этот синтаксис (4)? 
Синтаксис (4) называется инициализацией через список инициализаторов и используется для прямой инициализации полей объекта в момент его создания.
Как его расписать в теле конструктора?
inline HeapInt(int val) 
{
    heapValue = new int{ val };
}
3)Как скомпилировать это с помощью GCC?
g++  HeapInt.cpp main.cpp -o a.exe
4)Зачем (1)?Какую ситуацию это предотвратит?
#pragma once предотвращает многократное включение одного и того же заголовочного файла в процессе компиляции.
5) Почему (3) определена как inline?
inline определен в заголовочном файле (.h).Если конструктор не будет помечен как inline, при включении этого заголовочного файла в несколько компиляции компилятор создаст несколько копий функции, что вызовет ошибку линковки из-за повторения. Также компилятор может вставить тело функции непосредственно в место вызова, что оптимизирует работу. 
6)Как можно обойти ограничение, что конструктор или функция должны быть inline?
HeapInt::HeapInt(int val) : heapValue(new int{ val }){}
7)Зачем на (6) нужна проверка, если int* не может быть nullptr?  
Проверка assert(heapValue != nullptr); на строке (6) необходима, потому что при использовании конструктора перемещения HeapInt(HeapInt&&) происходит перенос владения памятью. При этом указатель heapValue в перемещаемом объекте обнуляется (nullptr), чтобы
указать, что перемещаемый объект больше не владеет памятью и избежать повторного удаления памяти в деструкторе.
8)Объясните, какой из конструкторов или перегруженных операторов вызовется для (8-14). Какие из них эквивалентны?
8)  HeapInt a{5};//Вызовется обычный конструктор HeapInt(int val).
9) HeapInt b{a}; //Вызовется конструктор копирования HeapInt(const HeapInt& hello).
10) HeapInt c{std::move(a)};//Вызовется конструктор перемещения HeapInt(HeapInt&& hello).
11) HeapInt d = b;//Эквивалентно HeapInt d{b}, вызовется конструктор копирования.
12) HeapInt e = std::move(b);//Эквивалентно HeapInt e{std::move(b)}, вызовется конструктор перемещения.
13) d = std::move(c);//Вызовется оператор перемещения присваивания operator=(HeapInt&& hello).
14) d = e;//Вызовется оператор копирующего присваивания operator=(const HeapInt& hello).

9)Как запретить синтаксис на (11-12)?
 Можно использовать ключевое слово explicit в конструкторах копирования и перемещения.
 explicit HeapInt(int val) 
        : heapValue(new int{ val })
    {
    }
10)Определите на (15) конструкторы и операторы на (7).
HeapInt::HeapInt(const HeapInt& hello) //Конструктор копирования
    : heapValue(new int{ *hello.heapValue })
{
}
HeapInt::HeapInt(HeapInt&& hello) noexcept //Конструктор перемещения
    : heapValue(hello.heapValue)
{
    hello.heapValue = nullptr;
}
HeapInt& HeapInt::operator=(const HeapInt& hello)//Оператор копирующего присваивания
{
    if (this != &hello) {
        *heapValue = *hello.heapValue;
    }
    return *this;
}
HeapInt& HeapInt::operator=(HeapInt&& hello) noexcept//Оператор перемещающего присваивания
{
    if (this != &hello) {
        delete heapValue;
        heapValue = hello.heapValue;
        hello.heapValue = nullptr;
    }
    return *this;
}
Как определить конструктор или перегруженный оператор отдельно?
Конструктор или оператор можно определить вне класса, добавив квалификатор имени класса.  

11)В какой еще ситуации вызовется rvalue reference перегрузка конструктора или оператора присваивания?
Перегрузка с rvalue reference (HeapInt&&) вызовется, если передается временный объект. 

12)Сколько раз вызовется деструктор для типа HeapInt после (14)?
Деструктор вызовется 5 раз — по одному для каждого объекта (a, b, c, d, e).

13)Объясните, какая по вашему мнению была мотивация того, что у этого типа не был определен дефолтный конструктор? 
Дефолтный конструктор не определен, так как объект HeapInt требует инициализации динамической памяти. Без значения для инициализации поведение было бы неопределенным.

14)Объясните, почему считывать значение объекта после применения std::move это неправильная операция?
После вызова std::move объект переводится в состояние(невалидное состояние).  
15)Создайте функцию void swap(HeapInt& a, HeapInt& b), которая меняет значения, без выделения новой динамической памяти.
 void swap(HeapInt&  a, HeapInt& b)
{
int temp = a;
a = b;
b = temp;
}

 
